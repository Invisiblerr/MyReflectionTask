package ru.qdts.p2;

import java.util.ArrayList;

import ru.qdts.p1.Mystery;

import java.lang.reflect.*;

public class Sherlock {
	
	private static final String ANALYZED_CLASS_NAME = "ru.qdts.p1.Mystery"; 

	public static void main(String[] args) throws ClassNotFoundException {
		
		MysteryTester mt = new MysteryTester();
		
		/*
		 * Запуская Шерлока вы обращаетесь к экземпляру класса MysteryTester, вызывая для него
		 * методы проверки вашей аналитики с использованием рефлексии:
		 * Ваша задача дать ответы на некоторые вопросы, касающиеся класса Mystery из пакета ru.qdts.p1
		 *
		 */
		
		
		/*
		 * ВОПРОС 1. Сколько всего полей у класса Mystery?
		 * Ответ передайте в метод question1 класса MysteryTester в виде аргумента типа int
		 */
		
		// Здесь должен быть ваш код для определения количества полей
		int answr1 = 0;
		Class<?> mc = Class.forName(ANALYZED_CLASS_NAME);
		Mystery mystery = new Class<?.()
		mt.question1(answr1);

		
		/*
		 * ВОПРОС 2. Сколько из этих полей - публичные?
		 * Ответ передайте в метод question2 класса MysteryTester в виде аргумента типа int
		 */
		
		// Здесь должен быть ваш код для определения количества публичных полей
		
		mt.question2(-1);
		
		/*
		 * ВОПРОС 3. А сколько из этих полей - защищенные (protected)?
		 * Ответ передайте в метод question3 класса MysteryTester в виде аргумента типа int
		 */
		
		// Здесь должен быть ваш код для определения количества защищенных полей
		
		
		mt.question3(-1);
		
		/*
		 * ВОПРОС 4. В классе должно быть поле, имя которого начинается c "bohemian", укажите его имя и модификатор (private, protected или public).
		 * Ответ передайте в метод question4 класса MysteryTester в виде аргументов типа String
		 */
		
		// Здесь должен быть ваш код для определения имени и модификатора поля
		
		
		mt.question4("", "");
		
		/*
		 * ВОПРОС 5. А какой тип у поля из предыдущего вопроса?
		 * Ответ передайте в метод question5 класса MysteryTester в виде аргумента типа String
		 */
		
		// Здесь должен быть ваш код для определения типа поля
		
		
		mt.question5("");
		
		/*
		 * ВОПРОС 6. А есть ли у нашего класса статическое поле, с именем начинающимся на baker? Если есть - укажите его имя, если нет - укажите "no"
		 * Ответ передайте в метод question6 класса MysteryTester в виде аргумента типа String
		 */
		
		// Здесь должен быть ваш код для определения наличия такого статического поля
		
		
		mt.question6("");
		
		/*
		 * ВОПРОС 7. Сколько всего конструкторов у нашего класса?
		 * Ответ передайте в метод question7 класса MysteryTester в виде аргумента типа int
		 */
		
		// Здесь должен быть ваш код для определения количества конструкторов
		
		
		mt.question7(-1);
		
		/*
		 * ВОПРОС 8. Сколько аргументов, принимают конструкторы с минимальным и максимальным количеством аргументов?
		 * Ответ передайте в метод question8 класса MysteryTester в виде аргументов типа int
		 */
		
		// Здесь должен быть ваш код для определения количества аргументов у двух конструкторов
		
		
		mt.question8(-1, -1);
		
		/*
		 * ВОПРОС 9. Каковы типы аргументов у конструктора с максимальным количеством аргументов?
		 * Ответ передайте в метод question9 класса MysteryTester в виде аргумента типа String вида "String,int,float,String" (показан пример)
		 */
		
		// Здесь должен быть ваш код для определения типов аргументов у конструктора
		
		
		mt.question9("");
		
		/*
		 * ВОПРОС 10. Создайте экземпляр класса Mystery с использованием конструктора с максимальным количеством аргументов. 
		 * Вам нужно выбрать правильные значения для аргументов. Какие? Возможно, вам помогут значения статических полей, которые есть у класса. 
		 * Ответ передайте в метод question10 класса MysteryTester в виде аргумента типа Mystery
		 */
		
		// Здесь должен быть ваш код для создания экземпляра класса (с использованием рефлексии!)
		
		
		mt.question10(null);
		
		/*
		 * ВОПРОС 11. Сколько всего методов у класса? Сколько из них - статические? 
		 * Ответ передайте в метод question11 класса MysteryTester в виде аргументов типа int
		 */
		
		// Здесь должен быть ваш код для определения общего количества методов и количества статических методов
		
		
		mt.question11(-1,-1);
		
		/*
		 * ВОПРОС 12. А сколько всего методов getter? Таковыми можно считать те, имена которых начинаются с "get" или "is"
		 * Ответ передайте в метод question12 класса MysteryTester в виде аргумента типа int
		 */
		
		// Здесь должен быть ваш код для определения количества методов getter
		
		
		mt.question12(-1);
		
		/*
		 * ВОПРОС 13. Для какого приватного поля класса нет метода setter (метод с именем set<Имя_поля>)?
		 * Ответ передайте в метод question13 класса MysteryTester в виде аргумента типа String
		 */
		
		// Здесь должен быть ваш код для определения приватного поля без метода getter
		
		
		mt.question13("");
		
		/*
		 * ВОПРОС 14. У класса есть метод со словом solve в названии. Какое у него имя?
		 * Ответ передайте в метод question14 класса MysteryTester в виде аргумента типа String
		 */
		
		// Здесь должен быть ваш код для определения имени метода
		
		
		mt.question14("");
		
		/*
		 * ВОПРОС 15. Перечислите типы аргументов для метода из прошлого вопроса.
		 * Ответ передайте в метод question15 класса MysteryTester в виде аргумента типа String вида "String,int,float,String" (показан пример)
		 */
		
		// Здесь должен быть ваш код для определения типа аргументов
		
		
		mt.question15("");
		
		
		/*
		 * ВОПРОС 16. Какой тип возвращает метод из предыдущих вопросов?
		 * Ответ передайте в метод question16 класса MysteryTester в виде аргумента типа String
		 */
		
		// Здесь должен быть ваш код для определения возвращаемого значения
		
		
		mt.question16("");
		
		/*
		 * ВОПРОС 17. Вызовите метод из двух предыдущих вопросов с ответом на главный вопрос вселенной в качестве аргумента.
		 * Ответ можно поискать в статических полях
		 */
		
		// Здесь должен быть ваш код для вызова метода
		
		
		mt.question17();
		
		System.out.println();
		
	}

}
